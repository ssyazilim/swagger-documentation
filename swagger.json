{
  "openapi": "3.0.3",
  "info": {
    "title": "SS-Ecommerce - API - OpenAPI 3.0",
    "description": "The SS-Ecommerce API, built on the OpenAPI 3.0 specification, provides a standardized, language-agnostic interface for interacting with an e-commerce platform.",
    "termsOfService": "https://swagger.io/terms/",
    "contact": { "email": "admin@ssyazilim.com" },
    "license": { "name": "MIT", "url": "https://opensource.org/licenses/MIT" },
    "version": "1.0.11"
  },
  "externalDocs": { "description": "Find out more about Swagger", "url": "https://swagger.io" },
  "servers": [
    { "url": "http://localhost:5000/api" },
    { "url": "https://api.opiaheart.com/api" },
    { "url": "https://api.sagmanhurda.com/api" },
    { "url": "https://api.chemb2b.com.tr/api" },
    { "url": "https://api.07kardeslertarim.com/api" },
    { "url": "https://api.ulusanelektrik.com/api" }
  ],
  "tags": [
    { "name": "Authentication", "description": "API authentications process for users" },
    { "name": "Address", "description": "Addresses for the system" },
    { "name": "Agreement",  "description": "User agreements for the system" },
    { "name": "Blog", "description": "Blogs for the system" },
    { "name": "Brand", "description": "Brands for the system" },
    { "name": "Card", "description": "User card information" },
    { "name": "Cart", "description": "Carts for the system" },
    { "name": "Category", "description": "Categories for the system" },
    { "name": "Company", "description": "Company information for the User" },
    { "name": "Country State City", "description": "Country State City for the User" },
    { "name": "Currency", "description": "Currencies for the system" },
    { "name": "External", "description": "External Services for the system" },
    { "name": "Form", "description": "Form process for users" },
    { "name": "Google Cloud", "description": "Google cloud operations for the system" },
    { "name": "Minio Bucket S3", "description": "Simple Storage Service for the bucket operations" },
    { "name": "Minio Object S3", "description": "Simple Storage Service for the object operations" },
    { "name": "Payment", "description": "User payment information" },
    { "name": "Product", "description": "Products for the system" },
    { "name": "Product Variant", "description": "Variants for the products" },
    { "name": "Question", "description": "Questions for the product" },
    { "name": "Review", "description": "Reviews for the product" },
    { "name": "Shipping", "description": "Shipping calculations for the system" },
    { "name": "Translation", "description": "Translations for the system" },
    { "name": "User", "description": "User process for users" }

  ],
  "paths": {
    "/public/auth/login": {
      "post": {
        "tags": [ "Authentication" ],
        "summary": "Login process for the User in the system",
        "operationId": "loginUser",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/loginUser" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/loginUser" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/loginUser" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/auth/register": {
      "post": {
        "tags": [ "Authentication" ],
        "summary": "Add a new user to system",
        "operationId": "addUser",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addUser" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addUser" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addUser" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/auth/register-verification": {
      "post": {
        "tags": [ "Authentication" ],
        "summary": "Activate User in the system",
        "operationId": "activateUser",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/activateUser" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/activateUser" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/activateUser" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/auth/password-reset": {
      "post": {
        "tags": [ "Authentication" ],
        "summary": "User can be reset password using this api",
        "operationId": "passwordResetUser",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/passwordResetUser" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/passwordResetUser" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/passwordResetUser" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/auth/password-reset-complete": {
      "post": {
        "tags": [ "Authentication" ],
        "summary": "User can be reset password for using this api",
        "operationId": "passwordResetCompleteUser",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/passwordResetCompleteUser" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/passwordResetCompleteUser" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/passwordResetCompleteUser" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },

    "/public/address": {
      "get": {
        "tags": [ "Address" ],
        "summary": "Get an address for session user from the system",
        "operationId": "getAddressForUser",
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "post": {
        "tags": [ "Address" ],
        "summary": "Add a new address to system",
        "operationId": "addAddress",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addAddress" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addAddress" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addAddress" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/public/address/{addressId}": {
      "get": {
        "tags": [ "Address" ],
        "summary": "Get an address from the system",
        "operationId": "getAddress",
        "parameters": [ { "in": "path", "name": "addressId", "required": true, "schema": { "type": "string" } } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "patch": {
        "tags": [ "Address" ],
        "summary": "Update an address from the system",
        "operationId": "updateAddress",
        "parameters": [ { "in": "path", "name": "addressId", "required": true, "schema": { "type": "string" } } ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/updateAddress" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/updateAddress" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/updateAddress" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "delete": {
        "tags": [ "Address" ],
        "summary": "Delete an address in the system",
        "operationId": "deleteAddress",
        "parameters": [ { "in": "path", "name": "addressId", "required": true, "schema": { "type": "string" } } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/addresses": {
      "get": {
        "tags": [ "Address" ],
        "summary": "Get all user addresses in the system",
        "operationId": "getAddresses",
        "parameters": [
          { "in": "query", "name": "page", "required": false, "schema": { "type": "integer", "example": 1 } },
          { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } },
          { "in": "query", "name": "sort", "required": false, "schema": { "type": "string", "example": "updatedAt,desc" } },
          { "in": "query", "name": "text", "required": false, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },

    "/public/agreements": {
      "get": {
        "tags": [ "Agreement" ],
        "summary": "Get all user agreements in the system",
        "operationId": "getAgreements",
        "parameters": [
          { "in": "query", "name": "page", "required": false, "schema": { "type": "integer", "example": 1 } },
          { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } },
          { "in": "query", "name": "sort", "required": false, "schema": { "type": "string", "example": "updatedAt,desc" } },
          { "in": "query", "name": "text", "required": false, "schema": { "type": "string" } },
          { "in": "query", "name": "isAll", "required": false, "schema": { "type": "boolean", "example": false } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/agreement/{locale}/{name}": {
      "get": {
        "tags": [ "Agreement" ],
        "summary": "Get a agreement from the system",
        "operationId": "getAgreement",
        "parameters": [
          { "in": "path", "name": "locale", "required": true, "schema": { "type": "string", "default": "tr", "enum": ["en", "tr"] } },
          { "in": "path", "name": "name", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/agreements": {
      "post": {
        "tags": [ "Agreement" ],
        "summary": "Add a new agreements to system (JSON or CSV)",
        "operationId": "addAgreements",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/agreement" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/agreement" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/agreement" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/agreement": {
      "post": {
        "tags": [ "Agreement" ],
        "summary": "Add a new agreement to system",
        "operationId": "addAgreement",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addAgreements" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addAgreements" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addAgreements" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "delete": {
        "tags": [ "Agreement" ],
        "summary": "Delete a agreement or agreements in the system",
        "operationId": "deleteAgreements",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/deleteModel" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/agreement/{agreementId}": {
      "patch": {
        "tags": [ "Agreement" ],
        "summary": "Update a agreement from the system",
        "operationId": "updateAgreement",
        "parameters": [ { "in": "path", "name": "agreementId", "required": true, "schema": { "type": "string" } } ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/updateAgreement" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/updateAgreement" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/updateAgreement" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },

    "/public/blogs": {
      "get": {
        "tags": [ "Blog" ],
        "summary": "Get all blogs in the system",
        "operationId": "getBlogs",
        "parameters": [
          { "in": "query", "name": "page", "required": false, "schema": { "type": "integer", "example": 1 } },
          { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } },
          { "in": "query", "name": "sort", "required": false, "schema": { "type": "string", "example": "updatedAt,desc" } },
          { "in": "query", "name": "text", "required": false, "schema": { "type": "string" } },
          { "in": "query", "name": "isAll", "required": false, "schema": { "type": "boolean", "example": false } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/blog/{blogId}": {
      "get": {
        "tags": [ "Blog" ],
        "summary": "Get a blog from the system",
        "operationId": "getBlog",
        "parameters": [ { "in": "path", "name": "blogId", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/blog/{blogId}/like": {
      "post": {
        "tags": ["Blog"],
        "summary": "Add a like or dislike to blog in the system",
        "operationId": "likeBlogs",
        "parameters": [ { "in": "path", "name": "blogId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/likeBlog" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/likeBlog" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/likeBlog" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/public/blog/{blogId}/comment": {
      "post": {
        "tags": ["Blog"],
        "summary": "Add a comment to blog in the system",
        "operationId": "commentBlogs",
        "parameters": [ { "in": "path", "name": "blogId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/commentBlog" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/commentBlog" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/commentBlog" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/blogs": {
      "post": {
        "tags": [ "Blog" ],
        "summary": "Add a new blogs to system (JSON or CSV)",
        "operationId": "addBlogs",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addBlogs" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addBlogs" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addBlogs" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/blog": {
      "post": {
        "tags": [ "Blog" ],
        "summary": "Add a new blog to system",
        "operationId": "addBlog",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/blog" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/blog" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/blog" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "delete": {
        "tags": [ "Blog" ],
        "summary": "Delete a blog or blogs in the system",
        "description": "",
        "operationId": "deleteBlogs",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/deleteModel" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/api/admin/blog/{blogId}": {
      "patch": {
        "tags": [ "Blog" ],
        "summary": "Update a blog from the system",
        "operationId": "updateBlog",
        "parameters": [ { "in": "path", "name": "blogId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/blog" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/blog" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/blog" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },

    "/public/brand": {
      "get": {
        "tags": [ "Brand" ],
        "summary": "Get all brands in the system",
        "operationId": "getBrands",
        "parameters": [
          { "in": "query", "name": "page", "required": false, "schema": { "type": "integer", "example": 1 } },
          { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } },
          { "in": "query", "name": "sort", "required": false, "schema": { "type": "string", "example": "updatedAt,desc" } },
          { "in": "query", "name": "text", "required": false, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/brand/{brandId}": {
      "get": {
        "tags": [ "Brand" ],
        "summary": "Get a brand from the system",
        "operationId": "getBrand",
        "parameters": [ { "in": "path", "name": "brandId", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/brand/{brandId}": {
      "patch": {
        "tags": [ "Brand" ],
        "summary": "Update a brand from the system",
        "operationId": "updateBrand",
        "parameters": [ { "in": "path", "name": "brandId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/updateBrand" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/updateBrand" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/updateBrand" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/brands": {
      "post": {
        "tags": [ "Brand" ],
        "summary": "Add a new brands to system (JSON or CSV)",
        "operationId": "addBrands",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addBrands" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addBrands" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addBrands" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/brand": {
      "post": {
        "tags": [ "Brand" ],
        "summary": "Add a new brand to system",
        "operationId": "addBrand",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/brand" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/brand" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/brand" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      },
      "delete": {
        "tags": [ "Brand" ],
        "summary": "Delete a brand or brands in the system",
        "description": "",
        "operationId": "deleteBrands",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/deleteModel" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },

    "/public/check-card/{userKey}": {
      "get": {
        "tags": [ "Card" ],
        "summary": "Get a special card for the user",
        "operationId": "getCardWithDetail",
        "parameters": [ { "in": "path", "name": "userKey", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/public/card": {
      "get": {
        "tags": [ "Card" ],
        "summary": "Get user cards token in the system",
        "operationId": "getCard",
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "post": {
        "tags": [ "Card" ],
        "summary": "Add a new card to system",
        "description": "",
        "operationId": "addCard",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addCard" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addCard" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addCard" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/public/card/{cardId}": {
      "delete": {
        "tags": [ "Card" ],
        "summary": "Delete a User card in the system",
        "operationId": "deleteCard",
        "parameters": [ { "in": "path", "name": "cardId", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/cards": {
      "get": {
        "tags": [ "Card" ],
        "summary": "Get all cards token in the system",
        "operationId": "getAllCards",
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },

    "/public/cart": {
      "get": {
        "tags": [ "Cart" ],
        "summary": "Get a cart from the system for User",
        "operationId": "getCartWithUserId",
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "post": {
        "tags": [ "Cart" ],
        "summary": "Add a new cart to system for User",
        "operationId": "addCart",
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/public/cart/product/update": {
      "post": {
        "tags": [ "Cart" ],
        "summary": "Add or remove product for cart",
        "operationId": "addToCart",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addToCart" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addToCart" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addToCart" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/public/cart/set-quantity": {
      "post": {
        "tags": [ "Cart" ],
        "summary": "Set quantity for product or variant",
        "operationId": "setQuantity",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/setQuantity" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/setQuantity" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/setQuantity" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/carts": {
      "get": {
        "tags": [ "Cart" ],
        "summary": "Get all carts in the system",
        "operationId": "getCarts",
        "parameters": [
          { "in": "query", "name": "page", "required": false, "schema": { "type": "integer", "example": 1 } },
          { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } },
          { "in": "query", "name": "sort", "required": false, "schema": { "type": "string", "example": "updatedAt,desc" } },
          { "in": "query", "name": "startDate", "required": false, "schema": { "type": "string", "example": "2024-12-15T00:00:00.000Z" } },
          { "in": "query", "name": "endDate", "required": false, "schema": { "type": "string", "example": "2024-12-15T23:59:59.999Z" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/cart/{cartId}": {
      "get": {
        "tags": [ "Cart" ],
        "summary": "Get a cart from the system",
        "operationId": "getCart",
        "parameters": [ { "in": "path", "name": "cartId", "required": true, "schema": { "type": "string" } } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },

    "/public/categories": {
      "get": {
        "tags": [ "Category" ],
        "summary": "Get all categories in the system",
        "operationId": "getCategories",
        "parameters": [
          { "in": "query", "name": "page", "required": false, "schema": { "type": "integer", "example": 1 } },
          { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } },
          { "in": "query", "name": "sort", "required": false, "schema": { "type": "string", "example": "updatedAt,desc" } },
          { "in": "query", "name": "text", "required": false, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/category/parent/{parentName}": {
      "get": {
        "tags": [ "Category" ],
        "summary": "Returns matching category parents in the database",
        "operationId": "getCategoryParent",
        "parameters": [ { "in": "path", "name": "parentName", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/category/tree/{treeName}": {
      "get": {
        "tags": [ "Category" ],
        "summary": "Returns all matching category for the category tree in database",
        "operationId": "getCategoryTree",
        "parameters": [ { "in": "path", "name": "treeName", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/category/name/{categoryName}": {
      "get": {
        "tags": [ "Category" ],
        "summary": "Returns all category parents matching the category name in the database",
        "operationId": "getCategoryNodes",
        "parameters": [ { "in": "path", "name": "categoryName", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/categories/google/{locale}": {
      "get": {
        "tags": [ "Category" ],
        "summary": "Get Google categories from the system",
        "operationId": "getGoogleCategories",
        "parameters": [ { "in": "path", "name": "locale", "required": true, "schema": { "type": "string", "default": "tr-TR", "enum": ["en-US", "tr-TR"] } } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/categories": {
      "post": {
        "tags": [ "Category" ],
        "summary": "Add a new categories to system",
        "operationId": "addCategories",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addCategory" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addCategory" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addCategory" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/category": {
      "post": {
        "tags": [ "Category" ],
        "summary": "Add a new category to system",
        "operationId": "addCategory",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/category" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/category" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/category" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      },
      "delete": {
        "tags": [ "Category" ],
        "summary": "Delete a categories in the system",
        "description": "",
        "operationId": "deleteCategories",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/deleteModel" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/category/{categoryId}": {
      "patch": {
        "tags": [ "Category" ],
        "summary": "Update a category from the system",
        "operationId": "updateCategory",
        "parameters": [ { "in": "path", "name": "categoryId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/category" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/category" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/category" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },

    "/public/company": {
      "get": {
        "tags": [ "Company" ],
        "summary": "Get a company information in the system",
        "operationId": "getCompany",
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/company": {
      "post": {
        "tags": [ "Company" ],
        "summary": "Add a company information for the system",
        "operationId": "addCompany",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addCompany" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addCompany" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addCompany" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/company/{companyId}": {
      "patch": {
        "tags": [ "Company" ],
        "summary": "Update a company to the system",
        "operationId": "updateCompany",
        "parameters": [ { "in": "path", "name": "companyId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/updateCompany" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/updateCompany" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/updateCompany" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/company/payment/{companyId}": {
      "post": {
        "tags": [ "Company" ],
        "summary": "Add a company payment for the system",
        "operationId": "addCompanyPayments",
        "parameters": [ { "in": "path", "name": "companyId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/companyPayment" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/companyPayment" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/companyPayment" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "patch": {
        "tags": [ "Company" ],
        "summary": "Update a company payment for the system",
        "operationId": "updateCompanyPayments",
        "parameters": [ { "in": "path", "name": "companyId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/companyPayment" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/companyPayment" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/companyPayment" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "delete": {
        "tags": [ "Company" ],
        "summary": "Delete a company payment in the system",
        "description": "",
        "operationId": "deleteCompanyPayments",
        "parameters": [ { "in": "path", "name": "companyId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/deleteModel" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },

    "/public/country": {
      "get": {
        "tags": [ "Country State City" ],
        "summary": "Get a Countries for the user",
        "operationId": "getCountry",
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/country/{countryCode}": {
      "get": {
        "tags": [ "Country State City" ],
        "summary": "Get a States for the user",
        "operationId": "getState",
        "parameters": [ { "in": "path", "name": "countryCode", "required": true, "schema": { "type": "string", "example": "TR" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/country/{countryCode}/city/{cityCode}": {
      "get": {
        "tags": [ "Country State City" ],
        "summary": "Get a Cities for the user",
        "operationId": "getCity",
        "parameters": [
          { "in": "path", "name": "countryCode", "required": true, "schema": { "type": "string", "example": "TR" } },
          { "in": "path", "name": "cityCode", "required": true, "schema": { "type": "string", "example": "06" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },

    "/public/currencies": {
      "get": {
        "tags": [ "Currency" ],
        "summary": "Get all currencies in the system",
        "operationId": "getCurrencies",
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/currencies/exchange": {
      "get": {
        "tags": [ "Currency" ],
        "summary": "Converts the sent rate to the desired rate",
        "description": "TRY = Turkish Lira | USD = American Dollar | EUR = Euro | GBP = British Pound Sterling | CHF = Switzerland Frank | JPY = Japanese Yen | SAR = Saudi Riyal | NOK = Norwegian Krone | DKK = Danish Krone | AUD = Australian Dollar | CAD = Canada Dollar | SEK = Swedish Krone | SRU = Russian Ruble",
        "operationId": "listCurrency",
        "parameters": [
          { "in": "query", "name": "from", "description": "TRY, USD, EUR, GBP, CHF, JPY, SAR, NOK, DKK, AUD, CAD, SEK, SRU", "required": true, "schema": { "type": "string" } },
          { "in": "query", "name": "quantity", "description": "You can define a number for currency amount", "required": true, "schema": { "type": "string" } },
          { "in": "query", "name": "to", "description": "TRY, USD, EUR, GBP, CHF, JPY, SAR, NOK, DKK, AUD, CAD, SEK, SRU", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },

    "/public/external": {
      "get": {
        "tags": [ "External" ],
        "summary": "Get external services in the system",
        "operationId": "getExternal",
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/external/{key}": {
      "get": {
        "tags": [ "External" ],
        "summary": "Get external service key in the system",
        "operationId": "getExternalKey",
        "parameters": [ { "in": "path", "name": "key", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/external": {
      "post": {
        "tags": [ "External" ],
        "summary": "Add a new external to the system",
        "operationId": "addExternal",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addExternal" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addExternal" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addExternal" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/external/{externalId}": {
      "patch": {
        "tags": [ "External" ],
        "summary": "Update a external to the system",
        "operationId": "updateExternal",
        "parameters": [ { "in": "path", "name": "externalId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/updateExternal" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/updateExternal" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/updateExternal" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },

    "/public/contact/send-message": {
      "post": {
        "tags": [ "Form" ],
        "summary": "Send a Customer message to system",
        "operationId": "sendMessageToSystem",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/contactMe" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/contactMe" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/contactMe" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/contact/upload-file": {
      "post": {
        "tags": [ "Form" ],
        "summary": "User can be upload a file (xml, pdf)",
        "operationId": "addFile",
        "requestBody": {
          "content": { "multipart/form-data": { "schema": { "$ref": "#/components/schemas/file" } } }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/contact/send-resume": {
      "post": {
        "tags": [ "Form" ],
        "summary": "Send a Customer resume to the authorities",
        "operationId": "sendResume",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/contactMeResume" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/contactMeResume" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/contactMeResume" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/contact/send-error-message": {
      "post": {
        "tags": [ "Form" ],
        "summary": "Send a Customer error message to system",
        "operationId": "sendErrorMessageToSystem",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/contactMeError" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/contactMeError" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/contactMeError" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/contact/subscribe": {
      "post": {
        "tags": [ "Form" ],
        "summary": "Add your email to subscription list",
        "operationId": "addMailToSubscription",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/passwordResetUser" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/passwordResetUser" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/passwordResetUser" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/contact/check-smtp": {
      "post": {
        "tags": [ "Form" ],
        "summary": "Check your SMTP settings is valid",
        "operationId": "checkSMTP",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/checkSMTP" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/checkSMTP" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/checkSMTP" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },

    "/admin/google-cloud/analytics-live": {
      "get": {
        "tags": [ "Google Cloud" ],
        "summary": "Get google analytics live stream",
        "operationId": "getAnalyticsLive",
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/google-cloud/analytics-report": {
      "get": {
        "tags": [ "Google Cloud" ],
        "summary": "Get google analytics data for the system",
        "operationId": "getAnalyticsReport",
        "parameters": [
          { "in": "query", "name": "dimension", "required": true, "schema": { "type": "string", "example": "country" } },
          { "in": "query", "name": "metric", "required": true, "schema": { "type": "string", "example": "activeUsers" } },
          { "in": "query", "name": "startDate", "required": false, "schema": { "type": "string", "example": "2024-12-15T00:00:00.000Z" } },
          { "in": "query", "name": "endDate", "required": false, "schema": { "type": "boolean", "example": "2024-12-15T23:59:59.999Z" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/google-cloud/gemini-prompt": {
      "post": {
        "tags": [ "Google Cloud" ],
        "summary": "Send a prompt to Gemini AI",
        "operationId": "sendGeminiPrompt",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/geminiPrompt" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/geminiPrompt" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/geminiPrompt" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },

    "/admin/minio/buckets": {
      "get": {
        "tags": [ "Minio Bucket S3" ],
        "summary": "Get all buckets in the system",
        "operationId": "getBuckets",
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/minio/bucket/{bucketName}": {
      "get": {
        "tags": [ "Minio Bucket S3" ],
        "summary": "Get bucket information in the system",
        "operationId": "getBucket",
        "parameters": [ { "in": "path", "name": "bucketName", "required": true, "schema": { "type": "string", "example": "test" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "post": {
        "tags": [ "Minio Bucket S3" ],
        "summary": "Add bucket for the system",
        "operationId": "addBucket",
        "parameters": [ { "in": "path", "name": "bucketName", "required": true, "schema": { "type": "string", "example": "test" } } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "delete": {
        "tags": [ "Minio Bucket S3" ],
        "summary": "Delete empty bucket for the system",
        "operationId": "deleteBucket",
        "parameters": [ { "in": "path", "name": "bucketName", "required": true, "schema": { "type": "string", "example": "test" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/minio/bucket-operations/incompleted-uploads": {
      "get": {
        "tags": [ "Minio Bucket S3" ],
        "summary": "Get partially uploaded objects in a bucket",
        "operationId": "getIncompletedUploads",
        "parameters": [
          { "in": "query", "name": "bucketName", "required": true, "schema": { "type": "string", "example": "test" } },
          { "in": "query", "name": "prefix", "required": false, "schema": { "type": "string", "example": "" }, "description": "Where to start => .../../" },
          { "in": "query", "name": "recursive", "required": false, "schema": { "type": "boolean", "example": "false" }, "description": "Include to the subfolders" }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/minio/bucket-operations": {
      "get": {
        "tags": [ "Minio Bucket S3" ],
        "summary": "Lists all objects in a bucket using S3 listing objects V2 API",
        "operationId": "listObjects",
        "parameters": [
          { "in": "query", "name": "bucketName", "required": true, "schema": { "type": "string", "example": "test" } },
          { "in": "query", "name": "prefix", "required": false, "schema": { "type": "string", "example": "" }, "description": "Where to start => .../../" },
          { "in": "query", "name": "recursive", "required": false, "schema": { "type": "boolean", "example": "false" }, "description": "Include to the subfolders" },
          { "in": "query", "name": "startAfter", "required": false, "schema": { "type": "string", "example": "" }, "description": "You can start from a point in an alphabetical directory => e.txt | k.txt" }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/minio/bucket-version/{bucketName}": {
      "get": {
        "tags": [ "Minio Bucket S3" ],
        "summary": "Get Versioning state of a Bucket",
        "operationId": "getBucketVersion",
        "parameters": [ { "in": "path", "name": "bucketName", "required": true, "schema": { "type": "string", "example": "test" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/minio/bucket-version": {
      "post": {
        "tags": [ "Minio Bucket S3" ],
        "summary": "Add bucket version for the bucket",
        "operationId": "addBucketVersion",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addBucketVersion" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addBucketVersion" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addBucketVersion" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/minio/bucket-config/{bucketName}": {
      "get": {
        "tags": [ "Minio Bucket S3" ],
        "summary": "Get Lifecycle Configuration of a Bucket",
        "operationId": "getBucketConfig",
        "parameters": [ { "in": "path", "name": "bucketName", "required": true, "schema": { "type": "string", "example": "test" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "delete": {
        "tags": [ "Minio Bucket S3" ],
        "summary": "Delete Lifecycle Configuration of a Bucket",
        "operationId": "deleteBucketConfig",
        "parameters": [ { "in": "path", "name": "bucketName", "required": true, "schema": { "type": "string", "example": "test" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/minio/bucket-config": {
      "post": {
        "tags": [ "Minio Bucket S3" ],
        "summary": "Set Lifecycle Configuration on a Bucket",
        "operationId": "addBucketConfig",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addBucketConfig" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addBucketConfig" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addBucketConfig" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },

    "/admin/minio/object/check-metadata": {
      "get": {
        "tags": [ "Minio Object S3" ],
        "summary": "Get metadata of a specific object",
        "operationId": "getObjectMetadata",
        "parameters": [
          { "in": "query", "name": "bucketName", "required": true, "schema": { "type": "string", "example": "test" } },
          { "in": "query", "name": "objectName", "required": true, "schema": { "type": "string", "example": "1.jpg" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/minio/object": {
      "get": {
        "tags": [ "Minio Object S3" ],
        "summary": "Get a specific object",
        "operationId": "getObject",
        "parameters": [
          { "in": "query", "name": "bucketName", "required": true, "schema": { "type": "string", "example": "test" } },
          { "in": "query", "name": "objectName", "required": true, "schema": { "type": "string", "example": "1.jpg" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "post": {
        "tags": [ "Minio Object S3" ],
        "summary": "Upload file to minio",
        "operationId": "addObject",
        "requestBody": {
          "content": {
            "multipart/form-data": { "schema": { "$ref": "#/components/schemas/addObject" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "delete": {
        "tags": [ "Minio Object S3" ],
        "summary": "Delete a specific object",
        "operationId": "deleteObject",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/deleteObject" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/deleteObject" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/deleteObject" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/minio/object/objects": {
      "delete": {
        "tags": [ "Minio Object S3" ],
        "summary": "Delete multiple objects",
        "operationId": "deleteObjects",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/deleteObjects" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/deleteObjects" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/deleteObjects" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/minio/object/copy": {
      "post": {
        "tags": [ "Minio Object S3" ],
        "summary": "Copy an object from one bucket to another",
        "operationId": "copyObject",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/copyObject" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/copyObject" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/copyObject" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/minio/object/presigned-url": {
      "post": {
        "tags": [ "Minio Object S3" ],
        "summary": "Generates a presigned URL for the provided HTTP method",
        "operationId": "getPresignedUrl",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/presignedUrl" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/presignedUrl" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/presignedUrl" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/minio/object/presigned-get-object": {
      "post": {
        "tags": [ "Minio Object S3" ],
        "summary": "Generates a presigned URL for HTTP GET operations",
        "operationId": "getPresignedGetObject",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/presignedGetObject" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/presignedGetObject" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/presignedGetObject" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/minio/object/presigned-put-object": {
      "post": {
        "tags": [ "Minio Object S3" ],
        "summary": "Generates a presigned URL for HTTP PUT operations",
        "operationId": "getPresignedPutObject",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/presignedGetObject" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/presignedGetObject" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/presignedGetObject" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },

    "/public/payment": {
      "get": {
        "tags": [ "Payment" ],
        "summary": "Get User payment in system",
        "operationId": "getPayment",
        "parameters": [
          { "in": "query", "name": "orderId", "schema": { "type": "string" } },
          { "in": "query", "name": "orderToken", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      },
      "post": {
        "tags": [ "Payment" ],
        "summary": "Save payment result to the system",
        "operationId": "savePayment",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/savePayment" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/savePayment" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/savePayment" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/payment/check/{paymentId}": {
      "get": {
        "tags": [ "Payment" ],
        "summary": "Check payment for the IYZICO Service",
        "operationId": "checkPaymentId",
        "parameters": [ { "in": "path", "name": "paymentId", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/payment/IYZICO/{locale}": {
      "post": {
        "tags": [ "Payment" ],
        "summary": "Check HTML Code for IYZICO Service",
        "operationId": "checkHTMLCodeForIYZICO",
        "parameters": [ { "in": "path", "name": "locale", "required": true, "schema": { "type": "string", "default": "tr", "enum": ["en", "tr"] } } ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/checkHTMLForIyzico" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/checkHTMLForIyzico" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/checkHTMLForIyzico" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/payment/IYZICO/{token}/{locale}": {
      "post": {
        "tags": [ "Payment" ],
        "summary": "Complete payment for IYZICO Service",
        "operationId": "completePaymentForIyzico",
        "parameters": [
          { "in": "path", "name": "token", "required": true, "schema": { "type": "string" } },
          { "in": "path", "name": "locale", "required": true, "schema": { "type": "string", "default": "tr", "enum": ["en", "tr"] } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/payments": {
      "get": {
        "tags": [ "Payment" ],
        "summary": "Get User Payments in the system",
        "operationId": "getPaymentsForTheUser",
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/public/payment/{locale}": {
      "post": {
        "tags": [ "Payment" ],
        "summary": "Add payment to the IYZICO Service",
        "operationId": "paymentForUser",
        "parameters": [ { "in": "path", "name": "locale", "required": true, "schema": { "type": "string", "default": "tr", "enum": ["en", "tr"] } } ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addPayment" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addPayment" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addPayment" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/public/payment/3D/{locale}": {
      "post": {
        "tags": [ "Payment" ],
        "summary": "Check HTML Code for the 3D Service",
        "operationId": "check3DForUser",
        "parameters": [ { "in": "path", "name": "locale", "required": true, "schema": { "type": "string", "default": "tr", "enum": ["en", "tr"] } } ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addPayment" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addPayment" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addPayment" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/public/payment/3D/{paymentId}/{locale}": {
      "post": {
        "tags": [ "Payment" ],
        "summary": "Complete payment for 3D Service",
        "operationId": "completePayment3DForIyzico",
        "parameters": [
          { "in": "path", "name": "locale", "required": true, "schema": { "type": "string", "default": "tr", "enum": ["en", "tr"] } },
          { "in": "path", "name": "paymentId", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/completePayment3D" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/completePayment3D" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/completePayment3D" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/public/payment/check/card": {
      "post": {
        "tags": [ "Payment" ],
        "summary": "Check card from IYZICO system",
        "operationId": "checkCard",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addCard" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addCard" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addCard" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/public/payment/check/installment": {
      "post": {
        "tags": [ "Payment" ],
        "summary": "Check installment for the IYZICO Service",
        "operationId": "installmentForUser",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/checkInstallment" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/checkInstallment" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/checkInstallment" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/public/payment/cancel/{locale}": {
      "post": {
        "tags": [ "Payment" ],
        "summary": "Cancel payment for the suddenly payment",
        "operationId": "cancelPayment",
        "parameters": [ { "in": "path", "name": "locale", "required": true, "schema": { "type": "string", "default": "tr", "enum": ["en", "tr"] } } ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/cancelPayment" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/cancelPayment" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/cancelPayment" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/payments": {
      "get": {
        "tags": [ "Payment" ],
        "summary": "Get all payments in the system",
        "operationId": "getPaymentsAdmin",
        "parameters": [
          { "in": "query", "name": "page", "required": false, "schema": { "type": "integer", "example": 1 } },
          { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } },
          { "in": "query", "name": "sort", "required": false, "schema": { "type": "string", "example": "updatedAt,desc" } },
          { "in": "query", "name": "text", "required": false, "schema": { "type": "string" } },
          { "in": "query", "name": "startDate", "required": false, "schema": { "type": "string", "example": "2024-12-15T00:00:00.000Z" } },
          { "in": "query", "name": "endDate", "required": false, "schema": { "type": "string", "example": "2024-12-15T23:59:59.999Z" } },
          { "in": "query", "name": "status", "required": false, "schema": { "type": "string", "example": "pending" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "delete": {
        "tags": [ "Payment" ],
        "summary": "Delete a payment or payments in the system",
        "description": "",
        "operationId": "deletePayments",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/deleteModel" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },

    "/public/products": {
      "get": {
        "tags": [ "Product" ],
        "summary": "Get all products in the system",
        "operationId": "getProducts",
        "parameters": [
          { "in": "query", "name": "page", "required": false, "schema": { "type": "integer", "example": 1 } },
          { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } },
          { "in": "query", "name": "sort", "required": false, "schema": { "type": "string", "example": "updatedAt,desc" } },
          { "in": "query", "name": "text", "required": false, "schema": { "type": "string" } },
          { "in": "query", "name": "category", "required": false, "schema": { "type": "string" } },
          { "in": "query", "name": "filters", "required": false, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/items/best-seller": {
      "get": {
        "tags": [ "Product" ],
        "summary": "Get all best products and variants in the system",
        "operationId": "getItems",
        "parameters": [ { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/products/XML/google": {
      "get": {
        "tags": [ "Product" ],
        "summary": "Get all products in the system with Google XML format",
        "operationId": "getProductsGoogleXML",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
	"/public/products/XML/yandex": {
      "get": {
        "tags": [ "Product" ],
        "summary": "Get all products in the system with Yandex XML format",
        "operationId": "getProductsYandexXML",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/product/{productId}": {
      "get": {
        "tags": [ "Product" ],
        "summary": "Get a product from the system",
        "operationId": "getProduct",
        "parameters": [ { "in": "path", "name": "productId", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/products/count": {
      "get": {
        "tags": [ "Product" ],
        "summary": "Check product and variant count in the system",
        "operationId": "countProducts",
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/products": {
      "post": {
        "tags": [ "Product" ],
        "summary": "Add a new products to the system",
        "operationId": "addProducts",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addProducts" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addProducts" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addProducts" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/product": {
      "post": {
        "tags": [ "Product" ],
        "summary": "Add a new product to system",
        "operationId": "addProduct",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/product" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/product" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/product" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "delete": {
        "tags": [ "Product" ],
        "summary": "Delete a product or products in the system",
        "description": "",
        "operationId": "deleteProduct",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/deleteModel" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/product/{productId}": {
      "patch": {
        "tags": [ "Product" ],
        "summary": "Update a product in the system",
        "operationId": "updateProduct",
        "parameters": [ { "in": "path", "name": "productId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/editProduct" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/editProduct" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/editProduct" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },

    "/public/products/variants": {
      "get": {
        "tags": [ "Product Variant" ],
        "summary": "Get all variants in the system",
        "operationId": "getVariants",
        "parameters": [
          { "in": "query", "name": "page", "required": false, "schema": { "type": "integer", "example": 1 } },
          { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } },
          { "in": "query", "name": "sort", "required": false, "schema": { "type": "string", "example": "updatedAt,desc" } },
          { "in": "query", "name": "text", "required": false, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/product/variants/{productId}": {
      "get": {
        "tags": [ "Product Variant" ],
        "summary": "Get a product variants from the system",
        "operationId": "getProductVariants",
        "parameters": [ { "in": "path", "name": "productId", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/product/variants": {
      "post": {
        "tags": [ "Product Variant" ],
        "summary": "Add a new variants to system",
        "operationId": "addVariantsMulti",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addVariantsMulti" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addVariantsMulti" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addVariantsMulti" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "delete": {
        "tags": [ "Product Variant" ],
        "summary": "Delete a variant or variants in the system",
        "operationId": "deleteVariant",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/deleteForVariant" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/deleteForVariant" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/deleteForVariant" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/product/variant/{productId}": {
      "post": {
        "tags": [ "Product Variant" ],
        "summary": "Add a new variant or variants to system",
        "operationId": "addVariant",
        "parameters": [ { "in": "path", "name": "productId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addVariant" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addVariant" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addVariant" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "patch": {
        "tags": [ "Product Variant" ],
        "summary": "Update a variant in the system",
        "operationId": "updateVariant",
        "parameters": [ { "in": "path", "name": "productId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/updateVariant" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/updateVariant" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/updateVariant" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },

    "/public/questions/{productId}": {
      "get": {
        "tags": [ "Question" ],
        "summary": "Get all questions for the product",
        "operationId": "getQuestionsForProduct",
        "parameters": [
          { "in": "path", "name": "productId", "required": true, "schema": { "type": "string" } },
          { "in": "query", "name": "page", "required": false, "schema": { "type": "integer", "example": 1 } },
          { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } },
          { "in": "query", "name": "sort", "required": false, "schema": { "type": "string", "example": "updatedAt,desc" } },
          { "in": "query", "name": "text", "required": false, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/questions": {
      "get": {
        "tags": [ "Question" ],
        "summary": "Get user questions in the system",
        "operationId": "getQuestions",
        "parameters": [
          { "in": "query", "name": "page", "required": false, "schema": { "type": "integer", "example": 1 } },
          { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } },
          { "in": "query", "name": "sort", "required": false, "schema": { "type": "string", "example": "updatedAt,desc" } },
          { "in": "query", "name": "text", "required": false, "schema": { "type": "string" } },
          { "in": "query", "name": "status", "required": false, "schema": { "type": "string", "default": "pending", "enum": ["pending", "approved", "rejected"] } }
        ],
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/question/{productId}": {
      "post": {
        "tags": [ "Question" ],
        "summary": "Add a new question for the product",
        "operationId": "addQuestion",
        "parameters": [ { "in": "path", "name": "productId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addQuestion" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addQuestion" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addQuestion" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/public/question/{questionId}": {
      "patch": {
        "tags": [ "Question" ],
        "summary": "Update a question for the product",
        "operationId": "updateQuestion",
        "parameters": [ { "in": "path", "name": "questionId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addQuestion" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addQuestion" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addQuestion" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      },
      "delete": {
        "tags": [ "Question" ],
        "summary": "Delete a review or reviews in the system",
        "description": "",
        "operationId": "deleteQuestion",
        "parameters": [ { "in": "path", "name": "questionId", "required": true, "schema": { "type": "string" } }],
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/questions": {
      "get": {
        "tags": [ "Question" ],
        "summary": "Get all questions in the system",
        "operationId": "getQuestionsAdmin",
        "parameters": [
          { "in": "query", "name": "page", "required": false, "schema": { "type": "integer", "example": 1 } },
          { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } },
          { "in": "query", "name": "sort", "required": false, "schema": { "type": "string", "example": "updatedAt,desc" } },
          { "in": "query", "name": "text", "required": false, "schema": { "type": "string" } },
          { "in": "query", "name": "status", "required": false, "schema": { "type": "string", "default": "pending", "enum": ["pending", "approved", "rejected"] } },
          { "in": "query", "name": "isAll", "required": false, "schema": { "type": "boolean", "example": false } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/question/{userId}/{productId}": {
      "post": {
        "tags": [ "Question" ],
        "summary": "Add a new admin question for the product",
        "operationId": "addQuestionAdmin",
        "parameters": [
          { "in": "path", "name": "userId", "required": true, "schema": { "type": "string" } },
          { "in": "path", "name": "productId", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/updateQuestion" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/updateQuestion" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/updateQuestion" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/question/{questionId}": {
      "patch": {
        "tags": [ "Question" ],
        "summary": "Update a question for the product",
        "operationId": "updateQuestionAdmin",
        "parameters": [ { "in": "path", "name": "questionId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/updateQuestion" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/updateQuestion" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/updateQuestion" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/question": {
      "delete": {
        "tags": [ "Question" ],
        "summary": "Delete a question from the system",
        "operationId": "deleteQuestionsAdmin",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/deleteModel" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },

    "/public/reviews/{productId}": {
      "get": {
        "tags": [ "Review" ],
        "summary": "Get all reviews for the product",
        "operationId": "getReviewsForProduct",
        "parameters": [
          { "in": "path", "name": "productId", "required": true, "schema": { "type": "string" } },
          { "in": "query", "name": "page", "required": false, "schema": { "type": "integer", "example": 1 } },
          { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } },
          { "in": "query", "name": "sort", "required": false, "schema": { "type": "string", "example": "updatedAt,desc" } },
          { "in": "query", "name": "text", "required": false, "schema": { "type": "string" } }

        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/reviews": {
      "get": {
        "tags": [ "Review" ],
        "summary": "Get user reviews in the system",
        "operationId": "getReviews",
        "parameters": [
          { "in": "query", "name": "page", "required": false, "schema": { "type": "integer", "example": 1 } },
          { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } },
          { "in": "query", "name": "sort", "required": false, "schema": { "type": "string", "example": "updatedAt,desc" } },
          { "in": "query", "name": "text", "required": false, "schema": { "type": "string" } },
          { "in": "query", "name": "status", "required": false, "schema": { "type": "string", "default": "pending", "enum": ["pending", "approved", "rejected"] } }
        ],
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/review/{productId}": {
      "post": {
        "tags": [ "Review" ],
        "summary": "Add a new review for the product",
        "operationId": "addReview",
        "parameters": [ { "in": "path", "name": "productId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addReview" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addReview" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addReview" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/public/review/{reviewId}": {
      "patch": {
        "tags": [ "Review" ],
        "summary": "Update a review for the product",
        "operationId": "updateReview",
        "parameters": [ { "in": "path", "name": "reviewId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addReview" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addReview" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addReview" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      },
      "delete": {
        "tags": [ "Review" ],
        "summary": "Delete a review or reviews in the system",
        "description": "",
        "operationId": "deleteReview",
        "parameters": [ { "in": "path", "name": "reviewId", "required": true, "schema": { "type": "string" } }],
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/reviews": {
      "get": {
        "tags": [ "Review" ],
        "summary": "Get all reviews in the system",
        "operationId": "getReviewsAdmin",
        "parameters": [
          { "in": "query", "name": "page", "required": false, "schema": { "type": "integer", "example": 1 } },
          { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } },
          { "in": "query", "name": "sort", "required": false, "schema": { "type": "string", "example": "updatedAt,desc" } },
          { "in": "query", "name": "text", "required": false, "schema": { "type": "string" } },
          { "in": "query", "name": "status", "required": false, "schema": { "type": "string", "default": "pending", "enum": ["pending", "approved", "rejected"] } },
          { "in": "query", "name": "isAll", "required": false, "schema": { "type": "boolean", "example": false } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/review/{userId}/{productId}": {
      "post": {
        "tags": [ "Review" ],
        "summary": "Add a new admin review for the product",
        "operationId": "addReviewAdmin",
        "parameters": [
          { "in": "path", "name": "userId", "required": true, "schema": { "type": "string" } },
          { "in": "path", "name": "productId", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addReview" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addReview" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addReview" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/review/{reviewId}": {
      "patch": {
        "tags": [ "Review" ],
        "summary": "Update a review for the product",
        "operationId": "updateReviewAdmin",
        "parameters": [ { "in": "path", "name": "reviewId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addReview" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addReview" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addReview" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/review": {
      "delete": {
        "tags": [ "Review" ],
        "summary": "Delete a reviews from the system",
        "operationId": "deleteReviewsAdmin",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/deleteModel" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },

    "/public/shipping": {
      "get": {
        "tags": [ "Shipping" ],
        "summary": "Get all shipping dealers in the system",
        "operationId": "getShippingDealers",
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/shipping/check-with-desi/{desi}": {
      "get": {
        "tags": [ "Shipping" ],
        "summary": "Get shipping prices from dealers with desi information",
        "operationId": "getPriceWithDesi",
        "parameters": [ { "in": "path", "name": "desi", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/shipping/check-with-size": {
      "post": {
        "tags": [ "Shipping" ],
        "summary": "Check shipping price from dealers",
        "operationId": "getPriceWithSize",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/checkShippingPrice" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/checkShippingPrice" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/checkShippingPrice" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/public/shipping/add-package-info": {
      "post": {
        "tags": [ "Shipping" ],
        "summary": "Add package information",
        "operationId": "addPackageInformation",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addPackage" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addPackage" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addPackage" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/public/shipping/add-package-info-with-dealer": {
      "post": {
        "tags": [ "Shipping" ],
        "summary": "Add package information and dealer name",
        "operationId": "addPackageInformationWithDealer",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addPackageInfoWithDealer" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addPackageInfoWithDealer" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addPackageInfoWithDealer" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },

    "/public/translation/{locale}/{name}": {
      "get": {
        "tags": [ "Translation" ],
        "summary": "Get a translation from the system",
        "operationId": "getTranslation",
        "parameters": [
          { "in": "path", "name": "locale", "required": true, "schema": { "type": "string", "default": "tr", "enum": ["en", "tr"] } },
          { "in": "path", "name": "name", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/translations": {
      "get": {
        "tags": [ "Translation" ],
        "summary": "Get all translations in the system",
        "operationId": "getTranslations",
        "parameters": [
          { "in": "query", "name": "page", "required": false, "schema": { "type": "integer", "example": 1 } },
          { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } },
          { "in": "query", "name": "sort", "required": false, "schema": { "type": "string", "example": "updatedAt,desc" } },
          { "in": "query", "name": "text", "required": false, "schema": { "type": "string" } },
          { "in": "query", "name": "isAll", "required": false, "schema": { "type": "boolean", "example": false } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "post": {
        "tags": [ "Translation" ],
        "summary": "Add a new translations to system (JSON or CSV)",
        "description": "",
        "operationId": "addTranslations",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addTranslations" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addTranslations" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addTranslations" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/translation": {
      "get": {
        "tags": [ "Translation" ],
        "summary": "Get a specific key translation in the system",
        "operationId": "getTranslationByKey",
        "parameters": [
          { "in": "query", "name": "locale", "required": true, "schema": { "type": "string", "example": "tr" } },
          { "in": "query", "name": "name", "required": true, "schema": { "type": "string", "example": "web" } },
          { "in": "query", "name": "key", "required": true, "schema": { "type": "string", "example": "private_forms_contactMe_contactWapp" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "post": {
        "tags": [ "Translation" ],
        "summary": "Add a new translation to system",
        "operationId": "addTranslation",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/translation" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/translation" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/translation" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "delete": {
        "tags": [ "Translation" ],
        "summary": "Delete a translation or translations in the system",
        "description": "",
        "operationId": "deleteTranslations",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/deleteModel" } }
          }
        },
        "security": [ { "JWT": [] } ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/admin/translation/{translationId}": {
      "patch": {
        "tags": [ "Translation" ],
        "summary": "Update a translation from the system",
        "operationId": "updateTranslation",
        "parameters": [ { "in": "path", "name": "translationId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/updateTranslation" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/updateTranslation" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/updateTranslation" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },

    "/public/user/{userId}": {
      "get": {
        "tags": [ "User" ],
        "summary": "Get a User in the system",
        "operationId": "getUser",
        "parameters": [ { "in": "path", "name": "userId", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        }
      }
    },
    "/public/user": {
      "patch": {
        "tags": [ "User" ],
        "summary": "User can edit information from the system",
        "operationId": "editUser",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/editUser" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/editUser" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/editUser" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "delete": {
        "tags": [ "User" ],
        "summary": "User can delete yourself from the system",
        "description": "",
        "operationId": "deleteUser",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/deleteUser" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/deleteUser" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/deleteUser" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/users": {
      "get": {
        "tags": [ "User" ],
        "summary": "Get all users in system",
        "operationId": "getUsers",
        "parameters": [
          { "in": "query", "name": "page", "required": false, "schema": { "type": "integer", "example": 1 } },
          { "in": "query", "name": "limit", "required": false, "schema": { "type": "integer", "example": 10 } },
          { "in": "query", "name": "sort", "required": false, "schema": { "type": "string", "example": "updatedAt,desc" } },
          { "in": "query", "name": "text", "required": false, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "post": {
        "tags": [ "User" ],
        "summary": "Add a new customers to the system (JSON or CSV)",
        "description": "",
        "operationId": "addCustomers",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/addCustomers" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/addCustomers" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/addCustomers" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/user": {
      "post": {
        "tags": [ "User" ],
        "summary": "Add a customer to the system",
        "operationId": "addCustomer",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/customer" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/customer" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/customer" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      },
      "delete": {
        "tags": [ "User" ],
        "summary": "Delete a customer from the system",
        "description": "",
        "operationId": "deleteCustomer",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/deleteModel" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/deleteModel" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    },
    "/admin/user/{userId}": {
      "patch": {
        "tags": [ "User" ],
        "summary": "Update a customer from the system",
        "operationId": "updateCustomer",
        "parameters": [ { "in": "path", "name": "userId", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/updateCustomer" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/updateCustomer" } },
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/updateCustomer" } }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/200" },
          "400": { "$ref": "#/components/responses/400" }
        },
        "security": [ { "JWT": [] } ]
      }
    }
  },
  "components": {
    "responses": {
      "200": { "description": "OK" },
      "400": { "description": "BAD_REQUEST" },
      "401": { "description": "UNAUTHORIZED" },
      "500": { "description": "NETWORK_ERROR" }
    },
    "schemas": {
      "activateUser": {
        "type": "object",
        "required": [ "key" ],
        "properties": {
          "key": { "type": "string" }
        }
      },
      "addAddress": {
        "type": "object",
        "required": [ "title", "name", "surname", "line", "country", "city", "district" ],
        "properties": {
          "title": { "type": "string", "example": "EV BOGAZKENT" },
          "name": { "type": "string", "example": "Fatma" },
          "surname": { "type": "string", "example": "Gür" },
          "country": { "type": "string", "example": "Turkey" },
          "city": { "type": "string", "example": "Antalya" },
          "district": { "type": "string", "example": "Serik" },
          "zipCode": { "type": "string", "example": "07500" },
          "line": { "type": "string", "example": "Boğazkent mahallesi İstiklal caddesi D Kümeevleri No:13" }
        }
      },
      "addAgreements": { "type": "array", "items": { "$ref": "#/components/schemas/agreement" } },
      "addBlogs": { "type": "array", "items": { "$ref": "#/components/schemas/blog" } },
      "addBrands": { "type": "array", "items": { "$ref": "#/components/schemas/brand" } },
      "addBucketConfig": {
        "type": "object",
        "required": [ "bucketName", "properties" ],
        "properties": {
          "bucketName": { "type": "string", "example": "test" },
          "properties": {
            "type": "object",
            "required": [ "Rule" ],
            "properties": {
              "Rule": {
                "type": "object",
                "required": [ "ID", "Status", "Filter", "Expiration" ],
                "properties": {
                  "ID": { "type": "string", "example": "Transition and Expiration Rule" },
                  "Status": { "type": "string", "example": "Enabled", "enum": ["Enabled", "Suspended"] },
                  "Filter": {
                    "type": "object",
                    "required": [ "Prefix" ],
                    "properties": {
                      "Prefix": { "type": "string", "example": "" }
                    }
                  },
                  "Expiration": {
                    "type": "object",
                    "required": [ "Days" ],
                    "properties": {
                      "Days": { "type": "string", "example": "3650" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "addBucketVersion": {
        "type": "object",
        "required": [ "bucketName", "properties" ],
        "properties": {
          "bucketName": { "type": "string", "example": "test" },
          "properties": {
            "type": "object",
            "required": [ "Status" ],
            "properties": {
              "Status": { "type": "string", "example": "Enabled", "enum": ["Enabled", "Suspended"] }
            }
          }
        }
      },
      "addCard": {
        "type": "object",
        "required": [ "cardAlias", "cardHolderName", "cardNumber", "expireMonth", "expireYear", "email" ],
        "properties": {
          "email": { "type": "string", "example": "alisarisariabali@gmail.com" },
          "card": {
            "type": "object",
            "required": [ "cardAlias", "cardHolderName", "cardNumber", "expireMonth", "expireYear" ],
            "properties": {
              "cardAlias": { "type": "string", "example": "ALISARI" },
              "cardHolderName": { "type": "string", "example": "ALI SARI" },
              "cardNumber": { "type": "string", "example": "5170410000000004" },
              "expireMonth": { "type": "string", "example": "10" },
              "expireYear": { "type": "string", "example": "2030" }
            }
          }
        }
      },
      "addCategory": { "type": "array", "items": { "$ref": "#/components/schemas/category" } },
      "addCompany": {
        "type": "object",
        "required": [ "name", "address" ],
        "properties": {
          "name": { "type": "string", "example": "Opia Heart" },
          "baseUrl": { "type": "string", "example": "https://opiaheart.com" },
          "logo": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [ "name", "image" ],
              "properties": {
                "name": { "type": "string", "example": "ffbc504a6d354e439ee20f998d249624.png" },
                "image": { "type": "string", "example": "https://minio.ssyazilim.com/images/opiaheart/company/ffbc504a6d354e439ee20f998d249624.png" }
              }
            }
          },
          "favicon": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [ "name", "image" ],
              "properties": {
                "name": { "type": "string", "example": "97f68e2dc923490b8623e7d285105aed.png" },
                "image": { "type": "string", "example": "https://minio.ssyazilim.com/images/opiaheart/company/97f68e2dc923490b8623e7d285105aed.png" }
              }
            }
          },
          "description": { "type": "string", "example": "Lorem ipsum dolor sit amet" },
          "timeZone": { "type": "string", "example": "Ankara" },
          "currency": { "type": "string", "example": "TRY" },
          "address": { "$ref": "#/components/schemas/companyAddress" },
          "socialMedia": { "type": "array", "items": { "$ref": "#/components/schemas/companySocialMedia" } },
          "payments": { "type": "array", "items": { "$ref": "#/components/schemas/companyPayment" } },
          "properties": { "$ref": "#/components/schemas/companyProperties" },
		  "mailOptions": { "$ref": "#/components/schemas/companyMailOptions" }
        }
      },
      "addCustomers": { "type": "array", "items": { "$ref": "#/components/schemas/customer" } },
      "addExternal": {
        "type": "object",
        "required": [ "name" ],
        "properties": {
          "geoLocation": { "$ref": "#/components/schemas/externalGeoLocation" },
          "iyzico": { "$ref": "#/components/schemas/externalIyzico" },
          "basitKargo": { "$ref": "#/components/schemas/externalBasitKargo" },
          "google": { "$ref": "#/components/schemas/externalGoogle" },
          "facebook": { "$ref": "#/components/schemas/externalFacebook" },
          "countryStateCity": { "$ref": "#/components/schemas/externalCountryStateCity" },
          "tawkTo": { "$ref": "#/components/schemas/externalTawkTo" }
        }
      },
      "addObject": {
        "type": "object",
        "required": [ "bucketName", "objectName", "file" ],
        "properties": {
          "bucketName": { "type": "string", "example": "test" },
          "objectName": { "type": "string", "example": "profile-photo.jpg", "description": "Object name to be stored in minio" },
          "file": { "type": "string", "format": "binary", "description": "File to upload" }
        }
      },
      "addPackage": {
        "type": "object",
        "required": [ "content", "client", "collect" ],
        "properties": {
          "content": {
            "type": "object",
            "required": [ "name", "code", "packages" ],
            "properties": {
              "name": { "type": "string", "example": "Heider XR-18650 Pro Original 3000MAH 3,7V High Drain Li-Mn Şarjlı Pil - Rohs ve Ce Sertifikalı" },
              "code": { "type": "string", "example": "#123456" },
              "packages": { "type": "array", "items": { "$ref": "#/components/schemas/packageSize" } }
            }
          },
          "client": { "$ref": "#/components/schemas/packageClient" },
          "collect": { "type": "number", "example": 100 }
        }
      },
      "addPackageInfoWithDealer": {
        "type": "object",
        "required": [ "handlerCode", "content", "client", "collect" ],
        "allOf": [{ "$ref": "#/components/schemas/addPackage" }],
        "properties": {
          "handlerCode": { "type": "string", "example": "MNG" }
        }
      },
      "addPayment": {
        "type": "object",
        "required": [ "paymentCard", "buyer", "shippingAddress", "billingAddress", "basketItems" ],
        "properties": {
          "paymentCard": { "$ref": "#/components/schemas/paymentCard" },
          "buyer": { "$ref": "#/components/schemas/buyer" },
          "shippingAddress": { "$ref": "#/components/schemas/shippingAddress" },
          "billingAddress": { "$ref": "#/components/schemas/billingAddress" },
          "basketItems": { "$ref": "#/components/schemas/basketItems" },
          "shipment": { "$ref": "#/components/schemas/shipment" }
        }
      },
      "addProducts": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [ "variants", "variantsType" ],
          "allOf": [ { "$ref": "#/components/schemas/product" } ],
          "properties": {
            "_id": {
              "type": "string",
              "example": "66f29aefff9245b28d05482e"
            },
            "variantsType": { "$ref": "#/components/schemas/variantsType" },
            "variants": {
              "type": "array",
              "items": { "type": "string", "example": ["66f29aefff9245b28d05482c", "66f29aefff9245b28d05482d"] }
            }
          }
        }
      },
      "addQuestion": {
        "type": "object",
        "required": [ "status", "question" ],
        "properties": {
          "status": { "type": "number", "example": 0 },
          "question": { "type": "string", "example": "Çoraplarınızda kullanılan kumaş türleri nelerdir?" }
        }
      },
      "addReview": {
        "type": "object",
        "required": [ "rating", "content", "status" ],
        "properties": {
          "status": { "type": "number", "example": 0 },
          "rating": { "type": "number", "example": 5 },
          "content": { "type": "string", "example": "Harika bir ürün. Kesinlikle tavsiye ederim." }
        }
      },
      "addToCart": {
        "type": "object",
        "required": [ "productId", "variantId", "quantity" ],
        "properties": {
          "productId": { "type": "string" },
          "variantId": { "type": "string" },
          "quantity": { "type": "number" }
        }
      },
      "addTranslations": { "type": "array", "items": { "$ref": "#/components/schemas/translation" } },
      "addVariant": {
        "type": "object",
        "required": [ "variantsType", "variant" ],
        "properties": {
          "variantsType": { "$ref": "#/components/schemas/variantsType" },
          "variant": { "$ref": "#/components/schemas/variant" }
        }
      },
      "addVariantsMulti": {
        "type": "array",
        "items": {
          "type": "object",
          "allOf": [ { "$ref": "#/components/schemas/variant" } ],
          "properties": {
            "productId": { "type": "string", "example": "66f29aefff9245b28d05482f" },
            "_id": { "type": "string", "example": "66f29aefff9245b28d05482e" }
          }
        }
      },
      "addUser": {
        "type": "object",
        "required": [ "name", "email", "phoneNumber", "password" ],
        "properties": {
          "name": { "type": "string", "example": "Barış" },
          "surname": { "type": "string", "example": "Gür" },
          "email": { "type": "string", "example": "ua_baris_07@hotmail.com" },
          "phoneNumber": { "type": "string", "example": "905365056943" },
          "password": { "type": "string", "example": "Passw0rd" }
        }
      },
      "agreement": {
        "type": "object",
        "required": [ "locale", "name", "content" ],
        "properties": {
          "locale": { "type": "string", "example": "en" },
          "name": { "type": "string", "example": "Test" },
          "content": { "type": "string", "example": "<p>Test</p>" }
        }
      },
      "basketItems": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [ "id", "name", "price", "quantity", "category1", "category2", "itemType", "tax" ],
          "properties": {
            "id": { "type": "string", "example": "674094c121add706a8980815" },
            "name": { "type": "string", "example": "Alluve Lilac Superslims - 20 Cigarettes" },
            "price": { "type": "number", "example": 500 },
            "quantity": { "type": "number", "example": 1 },
            "category1": { "type": "string", "example": "Sigaralar" },
            "category2": { "type": "string", "example": "product" },
            "itemType": { "type": "string", "example": "PHYSICAL" },
            "tax": { "type": "number", "example": 20 }
          }
        }
      },
      "billingAddress": {
        "type": "object",
        "required": [ "name", "surname", "country", "city", "address" ],
        "properties": {
          "name": { "type": "string", "example": "Halil" },
          "surname": { "type": "string", "example": "Gür" },
          "country": { "type": "string", "example": "Turkey" },
          "city": { "type": "string", "example": "Antalya" },
          "address": { "type": "string", "example": "Bahçelievler Mahallesi, Atatürk Parkı 25/21" },
          "zipCode": { "type": "string", "example": "07030" }
        }
      },
      "blog": {
        "type": "object",
        "required": [ "name", "content" ],
        "properties": {
          "name": { "type": "string", "example": "Ticaret ve E-ticaret Kavramları" },
          "content": { "type": "string", "example": "<p><b>Merhaba</b> bu bir test yazisidir.</p>" }
        }
      },
      "buyer": {
        "type": "object",
        "required": [ "email", "identityNumber", "registrationAddress", "country", "city" ],
        "properties": {
          "email": { "type": "string", "example": "davidmashadow@yandex.com" },
          "identityNumber": { "type": "string", "example": "19342410262" },
          "registrationAddress": { "type": "string", "example": "Sarıabalı Mahallesi, Müftüler Mevki, Sokak:20 No:3 Serik" },
          "country": { "type": "string",  "example": "Turkey" },
          "city": { "type": "string", "example": "Antalya" },
          "zipCode": { "type": "string", "example": "07500" }
        }
      },
      "brand": {
        "type": "object",
        "required": [ "name" ],
        "properties": {
          "name": { "type": "string" }
        }
      },
      "cancelPayment": {
        "type": "object",
        "required": [ "paymentId" ],
        "properties": {
          "paymentId": { "type": "string" }
        }
      },
      "category": {
        "type": "object",
        "required": [ "name", "parent", "tree" ],
        "properties": {
          "name": { "type": "string" },
          "parent": { "type": "string" },
          "tree": { "type": "array", "items": { "type": "string", "example": [ "root" ] } },
		      "categoryI10n": { "type": "string", "example": "{'id':'543586','name':'543586 - Kıyafet ve Aksesuarlar > Kıyafet Aksesuarları > Bandanalar ve Eşarplar > Bandana Örtüleri'}" }
        }
      },
      "checkHTMLForIyzico": {
        "type": "object",
        "required": [ "paymentCard", "buyer", "shippingAddress", "billingAddress", "basketItems" ],
        "properties": {
          "paymentCard": {
            "type": "object",
            "required": [ "name", "surname" ],
            "properties": {
              "name": { "type": "string", "example": "Ali" },
              "surname": { "type": "string", "example": "SARI" }
            }
          },
          "buyer": { "$ref": "#/components/schemas/buyer" },
          "shippingAddress": { "$ref": "#/components/schemas/shippingAddress" },
          "billingAddress": { "$ref": "#/components/schemas/billingAddress" },
          "basketItems": { "$ref": "#/components/schemas/basketItems" }
        }
      },
      "checkInstallment": {
        "type": "object",
        "required": [ "binNumber", "price" ],
        "properties": {
          "binNumber": { "type": "string", "example": "531157" },
          "price": { "type": "string", "example": "2500" }
        }
      },
      "checkSMTP": {
        "type": "object",
        "required": [ "user", "password", "host", "port", "from" ],
        "properties": {
          "user": { "type": "string", "example": "no-reply@ssyazilim.com" },
          "password": { "type": "string" },
          "host": { "type": "string", "example": "mail.ssyazilim.com" },
          "port": { "type": "number", "example": 465 },
          "from": { "type": "string", "example": "SS-TEST | ✉️ | <no-reply@ssyazilim.com>" }
        }
      },
      "checkShippingPrice": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [ "height", "width", "depth", "weight" ],
          "properties": {
            "height": { "type": "number", "example": 30 },
            "width": { "type": "number", "example": 30 },
            "depth": { "type": "number", "example": 20 },
            "weight": { "type": "number", "example": 2 }
          }
        }
      },
      "commentBlog": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "text": { "type": "string" }
        }
      },
      "companyAddress": {
        "type": "object",
        "required": [ "isCompany","phoneNumber", "email", "country", "city", "district", "line" ],
        "properties": {
          "isCompany": { "type": "boolean", "example": false },
          "companyName": { "type": "string", "example": "" },
          "name": { "type": "string", "example": "SULEYMAN" },
          "surname": { "type": "string", "example": "SARI" },
          "taxOffice": { "type": "string", "example": "" },
          "taxNumber": { "type": "string", "example": "" },
          "identityNumber": { "type": "string", "example": "19201414912" },
          "phoneNumber": { "type": "string", "example": "+905556988597" },
          "email": { "type": "string", "example": "no-reply@ssyazilim.com" },
          "country": { "type": "string", "example": "TURKEY" },
          "city": { "type": "string",  "example": "ANTALYA" },
          "district": { "type": "string", "example": "SERIK" },
          "zipCode": { "type": "string", "example": "07500" },
          "line": { "type": "string", "example": "Sarıabalı Mahallesi, Müftüler Mevkii, Sokak:20 NO:3" }
        }
      },
      "companySocialMedia": {
        "type": "object",
        "required": [ "name", "link", "icon" ],
        "properties": {
          "name": { "type": "string", "example": "Facebook" },
          "link": { "type": "string", "example": "https://www.facebook.com" },
          "icon": { "type": "string", "example": "M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" }
        }
      },
      "companyPayment": {
        "type": "object",
        "required": [ "status", "content" ],
        "properties": {
          "status": { "type": "string", "example": "{'_id':'0','name':'IBAN'}" },
          "content": { "type": "string", "example": "<p>Süleyman Sarı</p><p>TR.. .... .... .... .... .... ..</p>" }
        }
      },
      "companyPropertiesHomePage": {
        "type": "object",
        "required": [ "category", "categoryPreview", "cta", "feature", "hero", "logoCloud", "newsLetter", "slider", "stat", "teamSection", "testimonial" ],
        "properties": {
          "category": { "type": "boolean", "example": true },
          "categoryPreview": { "type": "boolean", "example": true },
          "cta": { "type": "string", "example": true },
          "feature": { "type": "string", "example": true },
          "hero": { "type": "string", "example": true },
          "logoCloud": { "type": "string", "example": true },
          "newsLetter": { "type": "string", "example": true },
          "slider": { "type": "string", "example": true },
          "stat": { "type": "string", "example": true },
          "teamSection": { "type": "string", "example": true }
        }
      },
      "companyPropertiesPaymentSettings": {
        "type": "object",
        "required": [ "cashDiscount", "doorToDoor" ],
        "properties": {
          "cashDiscount": { "type": "string", "example": "0" },
          "doorToDoor": {
            "type": "object",
            "required": [ "isEnabled", "minValue", "maxValue" ],
            "properties": {
              "isEnabled": { "type": "boolean", "example": false },
              "minValue": { "type": "number", "example": 0 },
              "maxValue": { "type": "number", "example": 0 }
            }
          }
        }
      },
      "companyPropertiesProductSettings": {
        "type": "object",
        "required": [ "callMe", "addFavorites", "notifyWhenPriceDrops", "notifyWhenProductBackInStock", "hideNoStockProducts", "hideReturnPeriod", "selectedProductListing", "taxAmount", "showTaxAmount" ],
        "properties": {
          "callMe": { "type": "boolean", "example": true },
          "addFavorites": { "type": "boolean", "example": true },
          "notifyWhenPriceDrops": { "type": "boolean", "example": true },
          "notifyWhenProductBackInStock": { "type": "boolean", "example": true },
          "hideNoStockProducts": { "type": "boolean", "example": false },
          "hideReturnPeriod": { "type": "boolean", "example": false },
          "selectedProductListing": { "type": "string", "example": "{'_id':'4','name':'public_forms_settings_company_config_selectedProductList_5'}" },
          "taxAmount": { "type": "number", "example": 20 },
          "showTaxAmount": { "type": "boolean", "example": true }
        }
      },
      "companyPropertiesOrderSettings": {
        "type": "object",
        "required": [ "orderPrefix", "orderCanDelete" ],
        "properties": {
          "orderPrefix": { "type": "boolean", "example": true },
          "orderCanDelete": { "type": "boolean", "example": true }
        }
      },
      "companyProperties": {
        "type": "object",
        "required": [ "paymentMethod", "liveChatMethod", "homePage", "paymentSettings" ],
        "properties": {
          "paymentMethod": { "type": "string", "example": "cash" },
          "liveChatMethod": { "type": "string", "example": "none" },
          "homePage": { "$ref": "#/components/schemas/companyPropertiesHomePage" },
          "paymentSettings": { "$ref": "#/components/schemas/companyPropertiesPaymentSettings" },
          "productSettings": { "$ref": "#/components/schemas/companyPropertiesProductSettings" },
          "orderSettings": { "$ref": "#/components/schemas/companyPropertiesOrderSettings" }
        }
      },
      "companyMailOptions": {
      "type": "object",
      "required": [ "user", "password", "host", "port", "mainMail", "secondMail" ],
      "properties": {
        "user": { "type": "string", "example": "handekaya26577@gmail.com" },
        "password": { "type": "string", "example": "U2FsdGVkX194q/DF4Ca6b7+R0o8Uz3g0tndy+kGN7syatbyAf13TPpEnyJOHP0wh" },
        "host": { "type": "string", "example": "smtp.gmail.com" },
        "port": { "type": "number", "example": 465 },
        "mainMail": { "type": "string", "example": "iletisim@opiaheart.com" },
        "secondMail": { "type": "string", "example": "support@opiaheart.com" },
        "from": { "type": "string", "example": "OPIAHEART |✉| <handekaya26577@gmail.com>" }
        }
      },
      "completePayment3D": {
        "type": "object",
        "required": [ "conversationId", "conversationData" ],
        "properties": {
          "conversationId": { "type": "string", "example": "e1e4b5c04f3a4b6a9d8ca0a6f3e3f4a1" },
          "conversationData": { "type": "string", "example": "" }
        }
      },
      "contactMe": {
        "type": "object",
        "required": [ "firstName", "email", "phoneNumber", "message", "agreed" ],
        "properties": {
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "company": { "type": "string" },
          "email": { "type": "string" },
          "phoneNumber": { "type": "string" },
          "message": { "type": "string" },
          "agreed": { "type": "boolean" }
        }
      },
      "contactMeError": {
        "type": "object",
        "required": [ "title", "message" ],
        "properties": {
          "email": { "type": "string" },
          "title": { "type": "string" },
          "message": { "type": "string" }
        }
      },
      "contactMeResume": {
        "type": "object",
        "required": [ "firstName", "lastName", "email", "phoneNumber", "fileName" ],
        "properties": {
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "email": { "type": "string" },
          "phoneNumber": { "type": "string" },
          "fileName": { "type": "string" }
        }
      },
      "copyObject": {
        "type": "object",
        "required": [ "targetBucket", "targetObject", "sourceObject" ],
        "properties": {
          "targetBucket": { "type": "string", "example": "test1" },
          "targetObject": { "type": "string", "example": "1.jpg" },
          "sourceObject": { "type": "string", "example": "test2/images/1.jpg" }
        }
      },
      "customer": {
        "type": "object",
        "required": [ "name", "surname", "email", "phoneNumber", "password", "role", "isActivated" ],
        "properties": {
          "name": { "type": "string", "example": "Adem" },
          "surname": { "type": "string", "example": "Şenocak" },
          "email": { "type": "string", "example": "senocak-a@hotmail.com" },
          "phoneNumber": { "type": "string", "example": "905425496142" },
          "password": { "type": "string", "example": "Passw0rd" },
          "role": { "type": "array", "items": { "type": "string" }, "example": ["ROLE_USER"] },
          "isActivated": { "type": "boolean", "example": true }
        }
      },
      "deleteForVariant": {
        "type": "object",
        "required": [ "productId", "variantsType", "selectedIds" ],
        "allOf": [{ "$ref": "#/components/schemas/deleteModel" }],
        "properties": {
          "productId": { "type": "string" },
          "variantsType": { "$ref": "#/components/schemas/variantsType" }
        }
      },
      "deleteModel": {
        "type": "object",
        "required": [ "selectedIds" ],
        "properties": {
          "selectedIds": { "type": "array", "items": { "type": "string" } }
        }
      },
      "deleteObject": {
        "type": "object",
        "required": [ "bucketName", "objectName" ],
        "properties": {
          "bucketName": { "type": "string", "example": "test" },
          "objectName": { "type": "string", "example": "1.jpg" }
        }
      },
      "deleteObjects": {
        "type": "object",
        "required": [ "bucketName", "objectNames" ],
        "properties": {
          "bucketName": { "type": "string", "example": "test" },
          "objectNames": { "type": "array", "items": { "type": "string", "example": ["1.jpg", "2.jpg", "3.jpg"] } }
        }
      },
      "deleteUser": {
        "type": "object",
        "required": [ "password" ],
        "properties": {
          "password": { "type": "string" }
        }
      },
      "editProduct": {
        "type": "object",
        "properties": {
          "title": { "type": "string", "example": "Grundig Gpdh 9634 A++ Enerji Sınıfı 9 kg Isı Pompa" }
        }
      },
      "editUser": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Mahmut" }
        }
      },
      "externalGeoLocation": {
        "type": "object",
        "required": [ "apiKey" ],
        "properties": {
          "apiKey": { "type": "string", "example": "84dede8f9e564a298f0c841693c91fd5" }
        }
      },
      "externalIyzico": {
        "type": "object",
        "required": [ "lang", "url", "apiKey", "secretKey" ],
        "properties": {
          "lang": { "type": "string", "example": "tr" },
          "url": { "type": "string", "example": "https://sandbox-api.iyzipay.com" },
          "apiKey": { "type": "string", "example": "sandbox-84dede8f9e564a298f0c841693c91fd5" },
          "secretKey": { "type": "string", "example": "sandbox-84dede8f9e564a298f0c841693c91fd5" }
        }
      },
      "externalBasitKargo": {
        "type": "object",
        "required": [ "url", "apiKey" ],
        "properties": {
          "url": { "type": "string", "example": "https://basitkargo.com" },
          "apiKey": { "type": "string", "example": "84dede8f9e564a298f0c841693c91fd5" }
        }
      },
      "externalGoogle": {
        "type": "object",
        "required": [ "analyticsId", "analyticsPropertyId", "tagManagerId", "apiKey", "clientId", "clientSecret", "callbackUrl" ],
        "properties": {
          "analyticsId": { "type": "string", "example": "G-123456" },
          "analyticsPropertyId": { "type": "string", "example": "123456789" },
          "tagManagerId": { "type": "string", "example": "GTM-123456" },
          "apiKey": { "type": "string", "example": "84dede8f9e564a298f0c841693c91fd5" },
          "clientId": { "type": "string", "example": "123456-abcdef123456.apps.googleusercontent.com" },
          "clientSecret": { "type": "string", "example": "84dede8f9e564a298f0c841693c91fd5" },
          "callbackUrl": { "type": "string", "example": "https://www.google.com" }
        }
      },
      "externalFacebook": {
        "type": "object",
        "required": [ "apiKey", "clientId", "clientSecret", "callbackUrl" ],
        "properties": {
          "apiKey": { "type": "string", "example": "84dede8f9e564a298f0c841693c91fd5" },
          "clientId": { "type": "string", "example": "123456-abcdef123456.apps.facebookusercontent.com" },
          "clientSecret": { "type": "string", "example": "84dede8f9e564a298f0c841693c91fd5" },
          "callbackUrl": { "type": "string", "example": "https://www.facebook.com" }
        }
      },
      "externalCountryStateCity": {
        "type": "object",
        "required": [ "url", "apiKey" ],
        "properties": {
          "url": { "type": "string", "example": "https://api.countrystatecity.in/v1/countries" },
          "apiKey": { "type": "string", "example": "84dede8f9e564a298f0c841693c91fd5" }
        }
      },
      "externalTawkTo": {
        "type": "object",
        "required": [ "propertyId", "widgetId" ],
        "properties": {
          "propertyId": { "type": "string", "example": "84dede8f9e564a298f0c841693c91fd5" },
          "widgetId": { "type": "string", "example": "84dede8f9e564a298f0c841693c91fd5" }
        }
      },
      "file": {
        "type": "object",
        "properties": {
          "file": { "type": "string", "format": "binary" }
        }
      },
      "geminiPrompt": {
        "type": "object",
        "required": [ "prompt" ],
        "properties": {
          "prompt": { "type": "string", "example": "Write a 25-word poem." }
        }
      },
      "image": {
        "type": "object",
        "properties": {
          "image": { "type": "string", "format": "binary" }
        }
      },
      "images": {
        "type": "object",
        "properties": {
          "staticImages": { "type": "array", "items": { "type": "string", "example": [] } },
          "dynamicImages": { "type": "array", "items": { "type": "string", "example": ["https://placehold.co/600x400/000000/FFF?text=Image+1,\\nhttps://placehold.co/600x400/000000/FFF?text=Image+2"] } }
        }
      },
      "likeBlog": {
        "type": "object",
        "properties": {
          "vote": { "type": "boolean" }
        }
      },
      "loginUser": {
        "type": "object",
        "required": [ "email", "password" ],
        "properties": {
          "email": { "type": "string" },
          "password": { "type": "string" }
        }
      },
      "packageClient": {
        "type": "object",
        "required": [ "name", "phone", "city", "town", "address" ],
        "properties": {
          "name": { "type": "string", "example": "Ali Sarı" },
          "phone": { "type": "string", "example": "+905326627836" },
          "city": { "type": "string", "example": "İstanbul" },
          "town": { "type": "string", "example": "Kadıköy" },
          "address": { "type": "string", "example": "Koşuyolu Mah. 1453.Cadde Nevra apartmani Daire:2 Kat:1" }
        }
      },
      "packageSize": {
        "type": "object",
        "required": [ "height", "width", "depth", "weight" ],
        "properties": {
          "height": { "type": "number", "example": 10 },
          "width": { "type": "number", "example": 15 },
          "depth": { "type": "number", "example": 5 },
          "weight": { "type": "number", "example": 1 }
        }
      },
      "paymentUser": {
        "type": "object",
        "required": [ "id", "paymentId", "token", "contactName", "phoneNumber", "email" ],
        "properties": {
          "id": { "type": "string", "example": "66ae616a9d86f0da5d4d25f6" },
          "paymentId": { "type": "string", "example": "22629933" },
          "token": { "type": "string", "example": "649eb03e-cfd2-4f24-86b0-95628a37a029" },
          "contactName": { "type": "string", "example": "Halil Erbil Gür" },
          "phoneNumber": { "type": "string", "example": "905527406607" },
          "email": { "type": "string", "example": "halilerbilgur@gmail.com" }
        }
      },
      "passwordResetCompleteUser": {
        "type": "object",
        "required": [ "email", "key", "newPassword" ],
        "properties": {
          "email": { "type": "string" },
          "key": { "type": "string" },
          "newPassword": { "type": "string" }
        }
      },
      "passwordResetUser": {
        "type": "object",
        "required": [ "email" ],
        "properties": {
          "email": { "type": "string" }
        }
      },
      "paymentCard": {
        "type": "object",
        "required": [ "name", "surname", "cardNumber", "expireMonth", "expireYear", "cvc", "installment", "registerCard" ],
        "properties": {
          "name": { "type": "string", "example": "ALI" },
          "surname": { "type": "string", "example": "SARI" },
          "cardNumber": { "type": "string", "example": "5890040000000016" },
          "expireMonth": { "type": "string", "example": "11" },
          "expireYear": { "type": "string", "example": "2026" },
          "cvc": { "type": "string", "example": "704" },
          "installment": { "type": "number", "example": 1 },
          "registerCard": { "type": "number", "example": 0 }
        }
      },
      "presignedUrl": {
        "type": "object",
        "required": [ "httpMethod", "bucketName", "objectName", "expiresIn" ],
        "properties": {
          "httpMethod": { "type": "string", "example": "GET" },
          "bucketName": { "type": "string", "example": "test" },
          "objectName": { "type": "string", "example": "1.jpg" },
          "expireTime": { "type": "number", "example": 360 }
        }
      },
      "presignedGetObject": {
        "type": "object",
        "required": [ "bucketName", "objectName", "expiresIn" ],
        "properties": {
          "bucketName": { "type": "string", "example": "test" },
          "objectName": { "type": "string", "example": "1.jpg" },
          "expireTime": { "type": "number", "example": 360 }
        }
      },
      "price": {
        "type": "object",
        "required": [ "currency", "purchase", "sell", "discount" ],
        "properties": {
          "currency": { "type": "string", "example": "TRY" },
          "purchase": { "type": "number", "example": 1000 },
          "sell": { "type": "number", "example": 1500 },
          "discount": { "type": "number", "example": 10 }
        }
      },
      "product": {
        "type": "object",
        "required": [ "title", "images", "price", "stockQuantity", "sku", "desi", "brand", "category", "categoryTree", "properties" ],
        "properties": {
          "title": { "type": "string", "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit." },
          "description": { "type": "string", "example": "Lorem ipsum dolor sit amet" },
          "images": { "$ref": "#/components/schemas/images" },
          "price": { "$ref": "#/components/schemas/price" },
          "stockQuantity": { "type": "number", "example": 100 },
          "desi": { "type": "number", "example": 2 },
          "brand": { "type": "string", "example": "67d15594f49546e19c4f2342" },
          "gtin": { "type": "string", "example": "0123456789012" },
          "sku": { "type": "string", "example": "0123456" },
          "category": { "type": "string", "example": "67f38474e1d5b52fee02dcba" },
          "properties": { "$ref": "#/components/schemas/productProperties" }
        }
      },
      "productProperties": {
        "type": "object",
        "properties": {
          "hidePrice": { "type": "boolean", "example": false },
          "isFeatured": { "type": "boolean", "example": false }
        }
      },
      "savePayment": {
        "type": "object",
        "required": [ "method", "status", "paymentUser", "buyer", "shippingAddress", "billingAddress", "basketItems", "shipping" ],
        "properties": {
          "method": { "type": "number", "example": 0 },
          "status": { "type": "string", "example": "pending" },
          "paymentUser": { "$ref": "#/components/schemas/paymentUser" },
          "buyer": { "$ref": "#/components/schemas/buyer" },
          "shippingAddress": { "$ref": "#/components/schemas/shippingAddress" },
          "billingAddress": { "$ref": "#/components/schemas/billingAddress" },
          "basketItems": { "$ref": "#/components/schemas/basketItems" },
          "shipment": { "$ref": "#/components/schemas/shipment" }
        }
      },
      "shipment": {
        "type": "object",
        "required": [ "method", "name", "price" ],
        "properties": {
          "method": { "type": "string", "example": "PACKAGE" },
          "name": { "type": "string", "example": "ARAS" },
          "price": { "type": "number", "example": 50 }
        }
      },
      "shippingAddress": {
        "type": "object",
        "required": [ "name", "surname", "country", "city", "address" ],
        "properties": {
          "name": { "type": "string", "example": "Ayşe" },
          "surname": { "type": "string", "example": "Sarı" },
          "country": { "type": "string", "example": "Turkey" },
          "city": { "type": "string", "example": "Antalya"},
          "address": { "type": "string", "example": "Sarıabalı Mahallesi, Müftüler Mevki, Sokak:20 No:3 Serik" },
          "zipCode": { "type": "string", "example": "07500" }
        }
      },
      "setQuantity": {
        "type": "object",
        "required": [ "itemId", "quantity" ],
        "properties": {
          "itemId": { "type": "string" },
          "quantity": { "type": "number", "example": 1 }
        }
      },
      "translation": {
        "type": "object",
        "required": [ "locale", "name", "translations" ],
        "properties": {
          "locale": { "type": "string", "example": "en" },
          "name": { "type": "string", "example": "Test" },
          "translations": {
            "type": "object",
            "properties": {
              "public_settings_currency": { "type": "string", "example": "TRY" }
            }
          }
        }
      },
      "updateAddress": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Durali" }
        }
      },
      "updateAgreement": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "web" }
        }
      },
      "updateBrand": {
        "type": "object",
        "properties": {
          "name": { "type": "string" }
        }
      },
      "updateCompany": {
        "type": "object",
        "properties": {
          "address": {
            "type": "object",
            "required": [ "isCompany", "name", "surname", "phoneNumber", "email", "country", "city", "district", "line" ],
            "properties": {
              "isCompany": { "type": "boolean", "example": false },
              "name": { "type": "string", "example": "AYSE" },
              "surname": { "type": "string", "example": "SARI" },
              "phoneNumber": { "type": "string", "example": "905556988597" },
              "email": { "type": "string", "example": "arda164@hotmail.com" },
              "country": { "type": "string", "example": "Turkey" },
              "city": { "type": "string", "example": "Antalya" },
              "district": { "type": "string", "example": "Serik" },
              "line": { "type": "string", "example": "Sariabali Mahallesi, Muftuler Mevki, Sokak:20 No:3" }
            }
          }
        }
      },
      "updateCustomer": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Mustafa Gökay" }
        }
      },
      "updateExternal": {
        "type": "object",
        "properties": {
          "geoLocation": {
            "type": "object",
            "properties": {
              "apiKey": { "type": "string", "example": "123456" }
            }
          }
        }
      },
      "updateQuestion": {
        "type": "object",
        "required": [ "status", "question", "answer" ],
        "properties": {
          "status": { "type": "number", "example": 0 },
          "question": { "type": "string", "example": "Çoraplarınızda kullanılan kumaş türleri nelerdir?" },
          "answer": { "type": "string", "example": "Pamuk, yün ve akrilik kullandık." }
        }
      },
      "updateTranslation": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "web" }
        }
      },
      "updateVariant": {
        "type": "object",
        "required": [ "name", "variantsType" ],
        "properties": {
          "variantsType": { "$ref": "#/components/schemas/variantsType" },
          "_id": { "type": "string", "example": "66f27bdc8a01cf36d27cbe1c" },
          "name": { "type": "string", "example": "Siyah" }
        }
      },
      "variant": {
        "type": "object",
        "required": [ "name", "images", "price", "stockQuantity", "sku", "desi" ],
        "properties": {
          "name": { "type": "string", "example": "Siyah" },
          "images": { "$ref": "#/components/schemas/images" },
          "price": { "$ref": "#/components/schemas/price" },
          "stockQuantity": { "type": "number", "example": 100 },
          "sku": { "type": "string", "example": "4SN106C" },
          "gtin": { "type": "string", "example": "0123450123456" },
          "desi": { "type": "number", "example": 2 }
        }
      },
      "variantsType": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [ "name", "variants" ],
          "properties": {
            "name": { "type": "string", "example": "Renk" },
            "variants": { "type": "array", "items": { "type": "string", "example": [ "Siyah" ] } }
          }
        }
      },
      "serverResponses": {
        "type": "object",
        "description": "This is Success and Error answers from the Backend services. If need status code check headers",
        "properties": {
          "Success Request =": { "$ref": "#/components/schemas/success" },
          "Failure Request =": { "$ref": "#/components/schemas/error" }
        }
      },
      "success": {
        "type": "object",
        "example": "'success': {'message': '...', 'data': [{...}, {...}]}",
        "properties": {
          "message": { "type": "string" },
          "data": { "type": "object" }
        }
      },
      "error": {
        "type": "object",
        "example": "'error': {'message': '...'}",
        "properties": {
          "message": { "type": "string" }
        }
      }
    },
    "securitySchemes": {
      "JWT": { "type": "apiKey", "name": "Authorization", "in": "header" }
    }
  }
}
